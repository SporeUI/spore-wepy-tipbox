<style lang="css">
.swpy-tipbox-mask{
	display: none;
	position: fixed;
	width: 100%;
	height: 100%;
	z-index: 10000;
	pointer-events: none;
}

.swpy-tipbox-show{
	display: block;
}

.swpy-tipbox{
	position: absolute;
	margin: 0 auto;
	top: 50%;
	left: 50%;
	opacity: 0;
	max-width: 20rem;
	overflow: hidden;
	background-color: rgba(0,0,0,0.8);
	padding: 10px 20px;
	font-size: 14px;
	line-height: 18px;
	border: none;
	color: #fff;
	border-radius: 5px;
	word-break: break-all;
	transform: translateX(-50%) translateY(-50%);
	animation: swpy-tipbox-fx 2s ease-in-out;
}

@keyframes swpy-tipbox-fx {
	0% { opacity:0; transform:translateX(-50%) translateY(-50%) scale(1.5); }
	10% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1); }
	90% { opacity:1; transform:translateX(-50%) translateY(-50%) scale(1); }
	100% { opacity:0; transform:translateX(-50%) translateY(-50%) scale(1); }
}
</style>

<template>
	<view class="swpy-tipbox-mask" :class="{swpy-tipbox-show:!!visible}">
		<view class="swpy-tipbox" style="{{cssText}}">{{tip}}</view>
	</view>
</template>

<script>
import wepy from 'wepy';

export default class TipBox extends wepy.component {

	data = {
		visible: false,
		position: '',
		margin: '',
		tip: ''
	};

	computed = {
		cssText() {
			let styles = {};
			if (this.position === 'top') {
				styles.position = this.position;
				styles.top = this.margin || '';
			} else if (this.position === 'bottom') {
				styles.position = this.position;
				styles.top = 'initial';
				styles.bottom = this.margin || '';
			}
			let css = Object.keys(styles).map(
				key => (key + ':' + styles[key])
			).join(';');
			return css;
		}
	};

	show(text, options) {
		if (!text) {
			return;
		}

		let conf = Object.assign({
			position: '',
			margin: '20px'
		}, options);

		this.hide();

		this.position = conf.position;
		this.margin = conf.margin;

		setTimeout(() => {
			this.visible = true;
			this.tip = text;
			this.$apply();
		}, 20);

		if (this.timer) {
			clearTimeout(this.timer);
			this.timer = null;
		}
		this.timer = setTimeout(() => this.hide(), 2000);
	}

	hide() {
		this.visible = false;
		this.tip = '';
		this.position = '';
		this.margin = '';
		this.$apply();
	}
}
</script>
